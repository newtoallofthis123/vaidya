// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ml.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TokensServer_FindSymptoms_FullMethodName = "/TokensServer/FindSymptoms"
	TokensServer_SayHello_FullMethodName     = "/TokensServer/SayHello"
)

// TokensServerClient is the client API for TokensServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokensServerClient interface {
	FindSymptoms(ctx context.Context, in *SymptomsRequest, opts ...grpc.CallOption) (*SymptomsResponse, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*Hello, error)
}

type tokensServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensServerClient(cc grpc.ClientConnInterface) TokensServerClient {
	return &tokensServerClient{cc}
}

func (c *tokensServerClient) FindSymptoms(ctx context.Context, in *SymptomsRequest, opts ...grpc.CallOption) (*SymptomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymptomsResponse)
	err := c.cc.Invoke(ctx, TokensServer_FindSymptoms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensServerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*Hello, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hello)
	err := c.cc.Invoke(ctx, TokensServer_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokensServerServer is the server API for TokensServer service.
// All implementations must embed UnimplementedTokensServerServer
// for forward compatibility.
type TokensServerServer interface {
	FindSymptoms(context.Context, *SymptomsRequest) (*SymptomsResponse, error)
	SayHello(context.Context, *HelloRequest) (*Hello, error)
	mustEmbedUnimplementedTokensServerServer()
}

// UnimplementedTokensServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTokensServerServer struct{}

func (UnimplementedTokensServerServer) FindSymptoms(context.Context, *SymptomsRequest) (*SymptomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSymptoms not implemented")
}
func (UnimplementedTokensServerServer) SayHello(context.Context, *HelloRequest) (*Hello, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTokensServerServer) mustEmbedUnimplementedTokensServerServer() {}
func (UnimplementedTokensServerServer) testEmbeddedByValue()                      {}

// UnsafeTokensServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokensServerServer will
// result in compilation errors.
type UnsafeTokensServerServer interface {
	mustEmbedUnimplementedTokensServerServer()
}

func RegisterTokensServerServer(s grpc.ServiceRegistrar, srv TokensServerServer) {
	// If the following call pancis, it indicates UnimplementedTokensServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TokensServer_ServiceDesc, srv)
}

func _TokensServer_FindSymptoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymptomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServerServer).FindSymptoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokensServer_FindSymptoms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServerServer).FindSymptoms(ctx, req.(*SymptomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokensServer_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokensServer_ServiceDesc is the grpc.ServiceDesc for TokensServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokensServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokensServer",
	HandlerType: (*TokensServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSymptoms",
			Handler:    _TokensServer_FindSymptoms_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _TokensServer_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml.proto",
}
